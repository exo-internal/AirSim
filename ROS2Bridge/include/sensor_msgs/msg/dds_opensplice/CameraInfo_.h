//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: CameraInfo_.h
//  Source: sensor_msgs\msg\dds_opensplice\CameraInfo_.idl
//  Generated: timestamp removed to make the build reproducible
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************
#ifndef _CAMERAINFO__H_
#define _CAMERAINFO__H_

#include "sacpp_mapping.h"
#include "RegionOfInterest_.h"
#include "Header_.h"
#include "sensor_msgs/msg/rosidl_typesupport_opensplice_cpp__visibility_control.h"


namespace sensor_msgs
{
   namespace msg
   {
      namespace dds_
      {
         struct CameraInfo_;
         typedef DDS::Double sensor_msgs__CameraInfo__double_array_9_slice;
         typedef DDS::Double sensor_msgs__CameraInfo__double_array_9[9];
         typedef sensor_msgs__CameraInfo__double_array_9 sensor_msgs__CameraInfo__double_array_9_out;
         ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs extern sensor_msgs__CameraInfo__double_array_9_slice * sensor_msgs__CameraInfo__double_array_9_alloc ();
         ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs extern void sensor_msgs__CameraInfo__double_array_9_free (sensor_msgs__CameraInfo__double_array_9_slice *);
         ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs extern void sensor_msgs__CameraInfo__double_array_9_copy (sensor_msgs__CameraInfo__double_array_9_slice* to, const sensor_msgs__CameraInfo__double_array_9_slice* from);
         ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs extern sensor_msgs__CameraInfo__double_array_9_slice *sensor_msgs__CameraInfo__double_array_9_dup (const sensor_msgs__CameraInfo__double_array_9_slice* from);

         struct sensor_msgs__CameraInfo__double_array_9_uniq_ {};
         typedef DDS_DCPS_FArray_var< sensor_msgs__CameraInfo__double_array_9, sensor_msgs__CameraInfo__double_array_9_slice, struct sensor_msgs__CameraInfo__double_array_9_uniq_> sensor_msgs__CameraInfo__double_array_9_var;
         typedef DDS_DCPS_Array_forany< sensor_msgs__CameraInfo__double_array_9, sensor_msgs__CameraInfo__double_array_9_slice, struct sensor_msgs__CameraInfo__double_array_9_uniq_> sensor_msgs__CameraInfo__double_array_9_forany;
         typedef DDS::Double sensor_msgs__CameraInfo__double_array_12_slice;
         typedef DDS::Double sensor_msgs__CameraInfo__double_array_12[12];
         typedef sensor_msgs__CameraInfo__double_array_12 sensor_msgs__CameraInfo__double_array_12_out;
         ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs extern sensor_msgs__CameraInfo__double_array_12_slice * sensor_msgs__CameraInfo__double_array_12_alloc ();
         ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs extern void sensor_msgs__CameraInfo__double_array_12_free (sensor_msgs__CameraInfo__double_array_12_slice *);
         ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs extern void sensor_msgs__CameraInfo__double_array_12_copy (sensor_msgs__CameraInfo__double_array_12_slice* to, const sensor_msgs__CameraInfo__double_array_12_slice* from);
         ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs extern sensor_msgs__CameraInfo__double_array_12_slice *sensor_msgs__CameraInfo__double_array_12_dup (const sensor_msgs__CameraInfo__double_array_12_slice* from);

         struct sensor_msgs__CameraInfo__double_array_12_uniq_ {};
         typedef DDS_DCPS_FArray_var< sensor_msgs__CameraInfo__double_array_12, sensor_msgs__CameraInfo__double_array_12_slice, struct sensor_msgs__CameraInfo__double_array_12_uniq_> sensor_msgs__CameraInfo__double_array_12_var;
         typedef DDS_DCPS_Array_forany< sensor_msgs__CameraInfo__double_array_12, sensor_msgs__CameraInfo__double_array_12_slice, struct sensor_msgs__CameraInfo__double_array_12_uniq_> sensor_msgs__CameraInfo__double_array_12_forany;

         struct ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_sensor_msgs CameraInfo_
         {
               struct _d__seq_uniq_ {};
               typedef DDS_DCPSUFLSeq < DDS::Double, struct _d__seq_uniq_> _d__seq;
               typedef DDS_DCPSSequence_var < _d__seq> _d__seq_var;
               typedef DDS_DCPSSequence_out < _d__seq> _d__seq_out;
               ::std_msgs::msg::dds_::Header_ header_;
               DDS::ULong height_;
               DDS::ULong width_;
               DDS::String_mgr distortion_model_;
               _d__seq d_;
               sensor_msgs__CameraInfo__double_array_9 k_;
               sensor_msgs__CameraInfo__double_array_9 r_;
               sensor_msgs__CameraInfo__double_array_12 p_;
               DDS::ULong binning_x_;
               DDS::ULong binning_y_;
               RegionOfInterest_ roi_;
         };

         typedef DDS_DCPSStruct_var < CameraInfo_> CameraInfo__var;
         typedef DDS_DCPSStruct_out < CameraInfo_> CameraInfo__out;
      }
   }
}
template <>
sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_slice* DDS_DCPS_ArrayHelper < sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_slice, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_slice, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_uniq_>::copy (sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_slice *to, const sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_slice* from);
template <>
void DDS_DCPS_ArrayHelper < sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_slice, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_uniq_>::free (sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9_slice *ptr);
template <>
sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_slice* DDS_DCPS_ArrayHelper < sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_slice, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_slice, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_uniq_>::copy (sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_slice *to, const sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_slice* from);
template <>
void DDS_DCPS_ArrayHelper < sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_slice, sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_uniq_>::free (sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12_slice *ptr);




#endif
